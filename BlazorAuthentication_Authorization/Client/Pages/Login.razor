@page "/login"
@using System.Net
@using BlazorAuthentication_Authorization.Client.Authentication
@using BlazorAuthentication_Authorization.Shared
@inject HttpClient httpClient
@inject IJSRuntime js
@inject AuthenticationStateProvider authenticationStateProvider
@inject NavigationManager navManager



<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="loginRequest.UserName" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="loginRequest.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>

</div>


@code {
    private LoginRequest loginRequest = new LoginRequest();

    private async Task Authenticate()
    {
        var loginReponse = await httpClient.PostAsJsonAsync<LoginRequest>("/api/Account/Login", loginRequest);

        if (loginReponse.IsSuccessStatusCode)
        {
            var userSession = await loginReponse.Content.ReadFromJsonAsync<UserSession>();

            var customAuthStateProvider = (CustomAuthenticationStateProvider)authenticationStateProvider;

            await customAuthStateProvider.UpdateAuthenticationState(userSession);
            navManager.NavigateTo("/", true);
        }
        else if (loginReponse.StatusCode == HttpStatusCode.Unauthorized)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }
    }
}
